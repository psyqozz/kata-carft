
plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
    id 'com.adarshr.test-logger' version '2.0.0'
}

apply from: './jacoco-config.gradle'
apply from: './sonarqube-conf.gradle'

group 'com.newlight77'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }

    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.0'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'

    testCompile("org.assertj:assertj-core:3.11.1")
    testCompile('com.sun.xml.bind:jaxb-osgi:2.3.2')
    testCompile("io.rest-assured:rest-assured:3.1.1") {
        exclude module: "com.sun.xml.bind:jaxb-osgi"
    }

    testCompile("io.cucumber:cucumber-java:5.6.0")
	testCompile("io.cucumber:cucumber-junit-platform-engine:5.6.0")
	testCompile("io.cucumber:cucumber-spring:5.6.0")
    testCompile("com.github.cukedoctor:cukedoctor-converter:1.2.1")

}

test {
    useJUnitPlatform()
//    testlogger {
//        theme 'mocha'
//    }

//    testLogging {
//        events "passed", "skipped", "failed", "standardOut", "standardError"
//        //exceptionFormat TestExceptionFormat.FULL
//        showExceptions true
//        showCauses true
//        showStackTraces true
//    }
//    afterTest { desc, result ->
//        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
//    }
//    afterSuite { desc, result ->
//        if (!desc.parent) { // will match the outermost suite
//            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
//            def startItem = '|  ', endItem = '  |'
//            def repeatLength = startItem.length() + output.length() + endItem.length()
//            println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
//        }
//    }
}

testlogger {
    theme 'mocha-parallel'
    showExceptions true
    showStackTraces true
    showFullStackTraces true
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams true
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
}

test.finalizedBy jacocoTestReport
test.finalizedBy jacocoTestCoverageVerification
